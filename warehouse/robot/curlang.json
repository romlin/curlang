[
  {
    "id": "part-R0TGQDAbQM",
    "type": "markdown",
    "disabled": false,
    "code": "# robot\nBuilt with Curlang"
  },
  {
    "id": "part-Cm3nrtRiDy",
    "type": "curlang",
    "disabled": false,
    "code": "# Download granite-3.1-2b-instruct-Q4_K_M.gguf\n!find \"granite-3.1-2b-instruct-Q4_K_M.gguf\" {\n    get \"https://huggingface.co/bartowski/granite-3.1-2b-instruct-GGUF/resolve/main/granite-3.1-2b-instruct-Q4_K_M.gguf\" as \"granite-3.1-2b-instruct-Q4_K_M.gguf\" {\n        pass \"Download completed!\"\n        fail \"Download failed!\"\n    }\n} else \"granite-3.1-2b-instruct-Q4_K_M.gguf already exists.\""
  },
  {
    "id": "part-eIn7Z4hcEg",
    "type": "curlang",
    "disabled": false,
    "code": "# Check whether granite-3.1-2b-instruct-Q4_K_M.gguf exists\nfind \"granite-3.1-2b-instruct-Q4_K_M.gguf\" {\n    print \"granite-3.1-2b-instruct-Q4_K_M.gguf exists.\"\n} else \"granite-3.1-2b-instruct-Q4_K_M.gguf is missing.\""
  },
  {
    "id": "part-jDtvuarB6N",
    "type": "curlang",
    "disabled": false,
    "code": "use Llama:llama_cpp"
  },
  {
    "id": "part-iWU9WNYAyJ",
    "type": "curlang",
    "disabled": false,
    "code": "python {\n    llm = Llama(\n        model_path=\"granite-3.1-2b-instruct-Q4_K_M.gguf\",\n        n_ctx=131072,\n        verbose=False\n    )\n\n    robot_prompt = \"\"\"\n        Control a robot arm with simple text commands. The arm has three parts: Base (B), which rotates along the Y-axis; Shoulder (S), which moves along the X-axis from 0° to 45°; and Elbow (E), which moves along the X-axis from -90° to 45°. Each command consists of a part identifier (B, S, or E) followed by a signed angle, such as \"B+30\" to rotate the base by +30° or \"S-15\" to move the shoulder by -15°. Ignore the \"M\" command for demo mode. Generate a sequence of commands for coordinated movement, like reaching or waving, ensuring all angles stay within limits and listing one command per line. Example output: B+30, S+20, E-10, B-15, S+10, E+15. Now, generate your sequence.\n    \"\"\"\n\n    output = llm(\n        f\"<|start_of_role|>system<|end_of_role|>You are a helpful assistant. Be concise and direct.<|end_of_text|><|start_of_role|>user<|end_of_role|>{robot_prompt}<|end_of_text|><|start_of_role|>assistant<|end_of_role|>\",\n        max_tokens=256,\n        stop=[\"<|endoftext|>\"],\n        seed=-1,\n        temperature=0.7\n    )[\"choices\"][0][\"text\"].strip()\n\n    with open(\"output/output.txt\", \"w\") as f:\n        f.write(output)\n\n    print(output)\n}"
  }
]