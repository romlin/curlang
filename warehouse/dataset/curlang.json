[
  {
    "id": "part-3Fm1oX59PJ",
    "type": "markdown",
    "disabled": false,
    "code": "# dataset\nBuilt with Curlang"
  },
  {
    "id": "part-KyQNR7LYar",
    "type": "curlang",
    "disabled": false,
    "code": "# Download EuroLLM-9B-Instruct-Q4_K_M.gguf\n!find \"EuroLLM-9B-Instruct-Q4_K_M.gguf\" {\n    get \"https://huggingface.co/bartowski/EuroLLM-9B-Instruct-GGUF/resolve/main/EuroLLM-9B-Instruct-Q4_K_M.gguf\" as \"EuroLLM-9B-Instruct-Q4_K_M.gguf\" {\n        pass \"Download completed!\"\n        fail \"Download failed!\"\n    }\n} else \"EuroLLM-9B-Instruct-Q4_K_M.gguf already exists.\""
  },
  {
    "id": "part-ze4yabZrKv",
    "type": "curlang",
    "disabled": false,
    "code": "use json, requests, time\nuse Llama:llama_cpp"
  },
  {
    "id": "part-juNyteLLOv",
    "type": "python",
    "disabled": false,
    "code": "url = \"https://huggingface.co/datasets/databricks/databricks-dolly-15k/resolve/main/databricks-dolly-15k.jsonl\"\ninput_filename = \"databricks-dolly-15k.jsonl\"\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    with open(input_filename, \"wb\") as f:\n        f.write(response.content)\n    print(f\"Downloaded dataset to {input_filename}\")\nelse:\n    raise Exception(f\"Failed to download file: HTTP {response.status_code}\")\n\nllm = Llama(\n    model_path=\"EuroLLM-9B-Instruct-Q4_K_M.gguf\",\n    n_ctx=2048,\n    verbose=False\n)\n\ndef translate_text(text, language=\"Swedish\"):\n    system_prompt = \"You are a translation assistant.\"\n    prompt_template = (\n        \"<|im_start|>system\\n\"\n        f\"{system_prompt}\\n\"\n        \"<|im_end|>\\n\"\n        \"<|im_start|>user\\n\"\n        \"Please translate the following text from English to Swedish.\\n\"\n        f\"Text: \\\"{text}\\\"\\n\"\n        \"Return only the translated text, without any additional commentary.\\n\"\n        \"<|im_end|>\\n\"\n        \"<|im_start|>assistant\"\n    )\n    result = llm(\n        prompt_template,\n        max_tokens=8192,\n        seed=-1,\n        temperature=0.1\n    )\n    translation = result[\"choices\"][0][\"text\"].strip()\n    return translation\n\ndef is_translation_valid(original, translation):\n    if not original.strip():\n        return True\n    return translation.strip() != original.strip()\n\noutput_filename = \"databricks-dolly-15k-swedish.jsonl\"\ntext_keys = [\"instruction\", \"context\", \"response\"]\n\nMAX_RETRIES = 5\n\nwith open(input_filename, \"r\", encoding=\"utf-8\") as infile, open(output_filename, \"w\", encoding=\"utf-8\") as outfile:\n    for line in infile:\n        record = json.loads(line)\n        skip_record = False\n        \n        for key in text_keys:\n            if key in record and isinstance(record[key], str):\n                if not record[key].strip():\n                    continue\n                retries = 0\n                success = False\n                \n                while retries < MAX_RETRIES:\n                    try:\n                        translated_text = translate_text(record[key], language=\"Swedish\")\n                        \n                        if is_translation_valid(record[key], translated_text):\n                            record[key] = translated_text\n                            print(f\"Translated key '{key}': {translated_text}\")\n                            success = True\n                            break\n                        else:\n                            print(f\"Translation for key '{key}' is identical to the original. Retrying... ({retries+1}/{MAX_RETRIES})\")\n                    except Exception as e:\n                        print(f\"Error translating key '{key}': {e}. Retrying... ({retries+1}/{MAX_RETRIES})\")\n                    retries += 1\n                    time.sleep(1)\n                \n                if not success:\n                    print(f\"Max retries reached for key '{key}'. Skipping entire record.\")\n                    skip_record = True\n                    break\n        \n        if skip_record:\n            continue\n        \n        outfile.write(json.dumps(record, ensure_ascii=False) + \"\\n\")\n        outfile.flush()\n\nprint(f\"Translated dataset saved to {output_filename}\")"
  }
]